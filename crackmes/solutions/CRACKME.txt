The snippet code contains logics of the program.

00401228   . 68 8E214000    PUSH OFFSET <CRACKME.Name>               ; The Name is saved in the stack
0040122D   . E8 4C010000    CALL <CRACKME.login_routine>             ; The function login_routine is called
00401232   . 50             PUSH EAX                                 ; The result of the function login_routine is saved in the stack
00401233   . 68 7E214000    PUSH OFFSET <CRACKME.Serial_key>         ; The Serial_key is saved in the stack
00401238   . E8 9B010000    CALL <CRACKME.serial_key_routine>        ; The function serial_key_routine is called
0040123D   . 83C4 04        ADD ESP,4                                ; The stack is cleaned
00401240   . 58             POP EAX                                  ; The EAX is restored
00401241   . 3BC3           CMP EAX,EBX                              ; Does hash_login equal hash_serial_key?
00401243   . 74 07          JE SHORT CRACKME.0040124C                ; If it is true, the message about congratulation will appear
00401245 > . E8 18010000    CALL <CRACKME.MessageBox(no_luck)>       ; The message about mistake
0040124A   .^EB 9A          JMP SHORT CRACKME.004011E6
0040124C   > E8 FC000000    CALL <CRACKME.MessageBox(good_work)>     ; The message about congratulation

The snippet code gets name.

004012B5  |. 6A 0B          PUSH 0B                                  ; /Count = B (11.)
004012B7  |. 68 8E214000    PUSH OFFSET <CRACKME.Name>               ; |Buffer = OFFSET <CRACKME.Name>
004012BC  |. 68 E8030000    PUSH 3E8                                 ; |ControlID = 3E8 (1000.)
004012C1  |. FF75 08        PUSH DWORD PTR SS:[EBP+8]                ; |hWnd
004012C4  |. E8 07020000    CALL <JMP.&USER32.GetDlgItemTextA>       ; \GetDlgItemTextA

The snippet code gets serial key.

004012D5  |. 6A 0B          PUSH 0B                                  ; /Count = B (11.)
004012D7  |. 68 7E214000    PUSH OFFSET <CRACKME.Serial_key>         ; |Buffer = OFFSET <CRACKME.Serial_key>
004012DC  |. 68 E9030000    PUSH 3E9                                 ; |ControlID = 3E9 (1001.)
004012E1  |. FF75 08        PUSH DWORD PTR SS:[EBP+8]                ; |hWnd
004012E4  |. E8 E7010000    CALL <JMP.&USER32.GetDlgItemTextA>       ; \GetDlgItemTextA

Function login_routine

0040137E >/$ 8B7424 04      MOV ESI,DWORD PTR SS:[ESP+4]             ; The ESI equals the argument of the function
00401382  |. 56             PUSH ESI                                 ; The ESI is saved in the stack
00401383  |> 8A06           /MOV AL,BYTE PTR DS:[ESI]                ; The beginning of the cicle. Get the character from the name
00401385  |. 84C0           |TEST AL,AL                              ; Does this character equal zero?
00401387  |. 74 13          |JE SHORT CRACKME.0040139C               ; If it is true, the cicle will be finish
00401389  |. 3C 41          |CMP AL,41                               ; Does the character below 0x41?
0040138B  |. 72 1F          |JB SHORT CRACKME.004013AC               ; If it is true, the cicle will be finished. The message about mistake will appear
0040138D  |. 3C 5A          |CMP AL,5A                               ; Does the character not below 0x51?
0040138F  |. 73 03          |JNB SHORT CRACKME.00401394              ; If it is not true, the character will be converted to the uppercase
00401391  |. 46             |INC ESI                                 ; The pointer of the name is incrament
00401392  |.^EB EF          |JMP SHORT CRACKME.00401383              ; Jump to the beginning of the cicle
00401394  |> E8 39000000    |CALL <CRACKME.upper>                    ; The function upper is called
00401399  |. 46             |INC ESI                                 ; The pointer of the name is incramented
0040139A  |.^EB E7          \JMP SHORT CRACKME.00401383              ; The end of the cicle. Jump to the beginning of the cicle
0040139C  |> 5E             POP ESI                                  ; The ESI is restored
0040139D  |. E8 20000000    CALL CRACKME.004013C2                    ; The function 004013C2 is called
004013A2  |. 81F7 78560000  XOR EDI,5678                             ; EDI = sum(name) ^ 0x5678
004013A8  |. 8BC7           MOV EAX,EDI                              ; The result of the function is saved in the EAX 
004013AA  |. EB 15          JMP SHORT CRACKME.004013C1               ; Jump to the end of the function
004013AC  |> 5E             POP ESI                                  ; The ESI is restored
004013AD  |. 6A 30          PUSH 30                                  ; /Style = MB_OK|MB_ICONEXCLAMATION|MB_APPLMODAL
004013AF  |. 68 60214000    PUSH CRACKME.00402160                    ; |Title = "No luck!"
004013B4  |. 68 69214000    PUSH CRACKME.00402169                    ; |Text = "No luck there, mate!"
004013B9  |. FF75 08        PUSH DWORD PTR SS:[EBP+8]                ; |hOwner
004013BC  |. E8 79000000    CALL <JMP.&USER32.MessageBoxA>           ; \MessageBoxA
004013C1  \> C3             RETN                                     ; Return
004013C2  /$ 33FF           XOR EDI,EDI                              ; EDI = 0
004013C4  |. 33DB           XOR EBX,EBX                              ; EBX = 0
004013C6  |> 8A1E           /MOV BL,BYTE PTR DS:[ESI]                ; Get the character from the name
004013C8  |. 84DB           |TEST BL,BL                              ; Does the character equal zero?
004013CA  |. 74 05          |JE SHORT CRACKME.004013D1               ; If it is true, the cicle will be finished
004013CC  |. 03FB           |ADD EDI,EBX                             ; The summarization of character value
004013CE  |. 46             |INC ESI                                 ; The pointer of the name is incramented
004013CF  |.^EB F5          \JMP SHORT CRACKME.004013C6              ; Jump to the beginning of the cicle
004013D1  \> C3             RETN                                     ; Return

Function serial_key_routine

004013D8 >/$ 33C0           XOR EAX,EAX                              ; EAX = 0
004013DA  |. 33FF           XOR EDI,EDI                              ; EDI = 0
004013DC  |. 33DB           XOR EBX,EBX                              ; EBX = 0
004013DE  |. 8B7424 04      MOV ESI,DWORD PTR SS:[ESP+4]             ; The ESI equals the argument of the function
004013E2  |> B0 0A          /MOV AL,0A                               ; The AL equals 0xA
004013E4  |. 8A1E           |MOV BL,BYTE PTR DS:[ESI]                ; Get the character from serial key
004013E6  |. 84DB           |TEST BL,BL                              ; Does the character equal zero?
004013E8  |. 74 0B          |JE SHORT CRACKME.004013F5               ; If it is true, the cicle well be finished
004013EA  |. 80EB 30        |SUB BL,30                               ; Subtrackt 0x30 from character
004013ED  |. 0FAFF8         |IMUL EDI,EAX                            ; EDI = EDI * 0xA
004013F0  |. 03FB           |ADD EDI,EBX                             ; EDI = EDI + EBX
004013F2  |. 46             |INC ESI                                 ; The pointer of the serial key is incramented
004013F3  |.^EB ED          \JMP SHORT CRACKME.004013E2              ; Jump to the beginning of the cicle
004013F5  |> 81F7 34120000  XOR EDI,1234                             ; EDI = sum(serial_key) ^ 0x1234
004013FB  |. 8BDF           MOV EBX,EDI                              ; The result of the function is saved in the EBX
004013FD  \. C3             RETN                                     ; Return


